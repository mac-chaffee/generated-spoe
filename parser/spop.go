// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package parser

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
)


/**
 * @see <a href="https://github.com/haproxy/haproxy/blob/v2.7.0/doc/SPOE.txt">Source</a>
 */

type Spop_FrameType int
const (
	Spop_FrameType__Unset Spop_FrameType = 0
	Spop_FrameType__HaproxyHello Spop_FrameType = 1
	Spop_FrameType__HaproxyDisconnect Spop_FrameType = 2
	Spop_FrameType__Notify Spop_FrameType = 3
	Spop_FrameType__AgentHello Spop_FrameType = 101
	Spop_FrameType__AgentDisconnect Spop_FrameType = 102
	Spop_FrameType__Ack Spop_FrameType = 103
)

type Spop_ActionType int
const (
	Spop_ActionType__SetVar Spop_ActionType = 1
	Spop_ActionType__UnsetVar Spop_ActionType = 2
)

type Spop_VarScope int
const (
	Spop_VarScope__Process Spop_VarScope = 0
	Spop_VarScope__Session Spop_VarScope = 1
	Spop_VarScope__Transaction Spop_VarScope = 2
	Spop_VarScope__Request Spop_VarScope = 3
	Spop_VarScope__Response Spop_VarScope = 4
)
type Spop struct {
	FrameLen uint32
	FrameType Spop_FrameType
	FrameMeta *Spop_FrameMeta
	FramePayload interface{}
	_io *kaitai.Stream
	_root *Spop
	_parent interface{}
}
func NewSpop() *Spop {
	return &Spop{
	}
}

func (this *Spop) Read(io *kaitai.Stream, parent interface{}, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.FrameLen = uint32(tmp1)
	tmp2, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.FrameType = Spop_FrameType(tmp2)
	tmp3 := NewSpop_FrameMeta()
	err = tmp3.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.FrameMeta = tmp3
	switch (this.FrameType) {
	case Spop_FrameType__Notify:
		tmp4 := NewSpop_ListOfMessages()
		err = tmp4.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.FramePayload = tmp4
	case Spop_FrameType__Ack:
		tmp5 := NewSpop_ListOfActions()
		err = tmp5.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.FramePayload = tmp5
	}
	return err
}
type Spop_Ipv4 struct {
	Addr []byte
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_TypedData
}
func NewSpop_Ipv4() *Spop_Ipv4 {
	return &Spop_Ipv4{
	}
}

func (this *Spop_Ipv4) Read(io *kaitai.Stream, parent *Spop_TypedData, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp6, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp6 = tmp6
	this.Addr = tmp6
	return err
}
type Spop_SpopString struct {
	StrLen *Varint
	StrData string
	_io *kaitai.Stream
	_root *Spop
	_parent interface{}
}
func NewSpop_SpopString() *Spop_SpopString {
	return &Spop_SpopString{
	}
}

func (this *Spop_SpopString) Read(io *kaitai.Stream, parent interface{}, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp7 := NewVarint()
	err = tmp7.Read(this._io, this, nil)
	if err != nil {
		return err
	}
	this.StrLen = tmp7
	tmp8, err := this.StrLen.Value()
	if err != nil {
		return err
	}
	tmp9, err := this._io.ReadBytes(int(tmp8))
	if err != nil {
		return err
	}
	tmp9 = tmp9
	this.StrData = string(tmp9)
	return err
}
type Spop_ActionSetVar struct {
	VarScope Spop_VarScope
	VarName *Spop_SpopString
	VarValue *Spop_TypedData
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_ListOfActions
}
func NewSpop_ActionSetVar() *Spop_ActionSetVar {
	return &Spop_ActionSetVar{
	}
}

func (this *Spop_ActionSetVar) Read(io *kaitai.Stream, parent *Spop_ListOfActions, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp10, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.VarScope = Spop_VarScope(tmp10)
	tmp11 := NewSpop_SpopString()
	err = tmp11.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.VarName = tmp11
	tmp12 := NewSpop_TypedData()
	err = tmp12.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.VarValue = tmp12
	return err
}
type Spop_MetaFlags struct {
	ReservedFlags uint64
	AbortFlag bool
	FinFlag bool
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_FrameMeta
}
func NewSpop_MetaFlags() *Spop_MetaFlags {
	return &Spop_MetaFlags{
	}
}

func (this *Spop_MetaFlags) Read(io *kaitai.Stream, parent *Spop_FrameMeta, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp13, err := this._io.ReadBitsIntBe(30)
	if err != nil {
		return err
	}
	this.ReservedFlags = tmp13
	tmp14, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.AbortFlag = tmp14 != 0
	tmp15, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.FinFlag = tmp15 != 0
	return err
}
type Spop_TypedData struct {
	TypeFlags uint64
	Type uint64
	TypeData interface{}
	_io *kaitai.Stream
	_root *Spop
	_parent interface{}
}
func NewSpop_TypedData() *Spop_TypedData {
	return &Spop_TypedData{
	}
}

func (this *Spop_TypedData) Read(io *kaitai.Stream, parent interface{}, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp16, err := this._io.ReadBitsIntBe(4)
	if err != nil {
		return err
	}
	this.TypeFlags = tmp16
	tmp17, err := this._io.ReadBitsIntBe(4)
	if err != nil {
		return err
	}
	this.Type = tmp17
	this._io.AlignToByte()
	switch (this.Type) {
	case 4:
		tmp18 := NewVarint()
		err = tmp18.Read(this._io, this, nil)
		if err != nil {
			return err
		}
		this.TypeData = tmp18
	case 6:
		tmp19 := NewSpop_Ipv4()
		err = tmp19.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.TypeData = tmp19
	case 7:
		tmp20 := NewSpop_Ipv6()
		err = tmp20.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.TypeData = tmp20
	case 1:
		tmp21 := NewSpop_NullType()
		err = tmp21.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.TypeData = tmp21
	case 3:
		tmp22 := NewVarint()
		err = tmp22.Read(this._io, this, nil)
		if err != nil {
			return err
		}
		this.TypeData = tmp22
	case 5:
		tmp23 := NewVarint()
		err = tmp23.Read(this._io, this, nil)
		if err != nil {
			return err
		}
		this.TypeData = tmp23
	case 8:
		tmp24 := NewSpop_SpopString()
		err = tmp24.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.TypeData = tmp24
	case 9:
		tmp25 := NewSpop_SpopString()
		err = tmp25.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.TypeData = tmp25
	case 2:
		tmp26 := NewVarint()
		err = tmp26.Read(this._io, this, nil)
		if err != nil {
			return err
		}
		this.TypeData = tmp26
	}
	return err
}
type Spop_ListOfMessages struct {
	MessageName *Spop_SpopString
	NbArgs uint8
	KvList []*Spop_KvList
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop
}
func NewSpop_ListOfMessages() *Spop_ListOfMessages {
	return &Spop_ListOfMessages{
	}
}

func (this *Spop_ListOfMessages) Read(io *kaitai.Stream, parent *Spop, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp27 := NewSpop_SpopString()
	err = tmp27.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.MessageName = tmp27
	tmp28, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NbArgs = tmp28
	for i := 0; i < int((this.NbArgs - 5)); i++ {
		_ = i
		tmp29 := NewSpop_KvList()
		err = tmp29.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.KvList = append(this.KvList, tmp29)
	}
	return err
}
type Spop_ActionUnsetVar struct {
	VarScope Spop_VarScope
	VarName *Spop_SpopString
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_ListOfActions
}
func NewSpop_ActionUnsetVar() *Spop_ActionUnsetVar {
	return &Spop_ActionUnsetVar{
	}
}

func (this *Spop_ActionUnsetVar) Read(io *kaitai.Stream, parent *Spop_ListOfActions, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp30, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.VarScope = Spop_VarScope(tmp30)
	tmp31 := NewSpop_SpopString()
	err = tmp31.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.VarName = tmp31
	return err
}
type Spop_FrameMeta struct {
	MetaFlags *Spop_MetaFlags
	StreamId *Varint
	FrameId *Varint
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop
	_raw_MetaFlags []byte
}
func NewSpop_FrameMeta() *Spop_FrameMeta {
	return &Spop_FrameMeta{
	}
}

func (this *Spop_FrameMeta) Read(io *kaitai.Stream, parent *Spop, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp32, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp32 = tmp32
	this._raw_MetaFlags = tmp32
	_io__raw_MetaFlags := kaitai.NewStream(bytes.NewReader(this._raw_MetaFlags))
	tmp33 := NewSpop_MetaFlags()
	err = tmp33.Read(_io__raw_MetaFlags, this, this._root)
	if err != nil {
		return err
	}
	this.MetaFlags = tmp33
	tmp34 := NewVarint()
	err = tmp34.Read(this._io, this, nil)
	if err != nil {
		return err
	}
	this.StreamId = tmp34
	tmp35 := NewVarint()
	err = tmp35.Read(this._io, this, nil)
	if err != nil {
		return err
	}
	this.FrameId = tmp35
	return err
}
type Spop_Ipv6 struct {
	Addr []byte
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_TypedData
}
func NewSpop_Ipv6() *Spop_Ipv6 {
	return &Spop_Ipv6{
	}
}

func (this *Spop_Ipv6) Read(io *kaitai.Stream, parent *Spop_TypedData, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp36, err := this._io.ReadBytes(int(16))
	if err != nil {
		return err
	}
	tmp36 = tmp36
	this.Addr = tmp36
	return err
}
type Spop_KvList struct {
	KvName *Spop_SpopString
	KvValue *Spop_TypedData
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_ListOfMessages
}
func NewSpop_KvList() *Spop_KvList {
	return &Spop_KvList{
	}
}

func (this *Spop_KvList) Read(io *kaitai.Stream, parent *Spop_ListOfMessages, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp37 := NewSpop_SpopString()
	err = tmp37.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.KvName = tmp37
	tmp38 := NewSpop_TypedData()
	err = tmp38.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.KvValue = tmp38
	return err
}

/**
 * bools pull their values from the type_flags
 */
type Spop_SpopBool struct {
	_io *kaitai.Stream
	_root *Spop
	_parent interface{}
}
func NewSpop_SpopBool() *Spop_SpopBool {
	return &Spop_SpopBool{
	}
}

func (this *Spop_SpopBool) Read(io *kaitai.Stream, parent interface{}, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}
type Spop_NullType struct {
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_TypedData
}
func NewSpop_NullType() *Spop_NullType {
	return &Spop_NullType{
	}
}

func (this *Spop_NullType) Read(io *kaitai.Stream, parent *Spop_TypedData, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}
type Spop_ListOfActions struct {
	ActionType Spop_ActionType
	NbArgs uint8
	ActionArgs interface{}
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop
}
func NewSpop_ListOfActions() *Spop_ListOfActions {
	return &Spop_ListOfActions{
	}
}

func (this *Spop_ListOfActions) Read(io *kaitai.Stream, parent *Spop, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp39, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ActionType = Spop_ActionType(tmp39)
	tmp40, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NbArgs = tmp40
	switch (this.ActionType) {
	case Spop_ActionType__SetVar:
		tmp41 := NewSpop_ActionSetVar()
		err = tmp41.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.ActionArgs = tmp41
	case Spop_ActionType__UnsetVar:
		tmp42 := NewSpop_ActionUnsetVar()
		err = tmp42.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.ActionArgs = tmp42
	}
	return err
}
