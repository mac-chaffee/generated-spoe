// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package parser

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
)


/**
 * @see <a href="https://github.com/haproxy/haproxy/blob/v2.7.0/doc/SPOE.txt">Source</a>
 */

type Spop_FrameType int
const (
	Spop_FrameType__Unset Spop_FrameType = 0
	Spop_FrameType__HaproxyHello Spop_FrameType = 1
	Spop_FrameType__HaproxyDisconnect Spop_FrameType = 2
	Spop_FrameType__Notify Spop_FrameType = 3
	Spop_FrameType__AgentHello Spop_FrameType = 101
	Spop_FrameType__AgentDisconnect Spop_FrameType = 102
	Spop_FrameType__Ack Spop_FrameType = 103
)

type Spop_ActionType int
const (
	Spop_ActionType__SetVar Spop_ActionType = 1
	Spop_ActionType__UnsetVar Spop_ActionType = 2
)

type Spop_VarScope int
const (
	Spop_VarScope__Process Spop_VarScope = 0
	Spop_VarScope__Session Spop_VarScope = 1
	Spop_VarScope__Transaction Spop_VarScope = 2
	Spop_VarScope__Request Spop_VarScope = 3
	Spop_VarScope__Response Spop_VarScope = 4
)
type Spop struct {
	LenFrame uint32
	Frame *Spop_Frame
	_io *kaitai.Stream
	_root *Spop
	_parent interface{}
	_raw_Frame []byte
}
func NewSpop() *Spop {
	return &Spop{
	}
}

func (this *Spop) Read(io *kaitai.Stream, parent interface{}, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.LenFrame = uint32(tmp1)
	tmp2, err := this._io.ReadBytes(int(this.LenFrame))
	if err != nil {
		return err
	}
	tmp2 = tmp2
	this._raw_Frame = tmp2
	_io__raw_Frame := kaitai.NewStream(bytes.NewReader(this._raw_Frame))
	tmp3 := NewSpop_Frame()
	err = tmp3.Read(_io__raw_Frame, this, this._root)
	if err != nil {
		return err
	}
	this.Frame = tmp3
	return err
}
type Spop_FragmentedFrame struct {
	RawData []byte
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_Frame
}
func NewSpop_FragmentedFrame() *Spop_FragmentedFrame {
	return &Spop_FragmentedFrame{
	}
}

func (this *Spop_FragmentedFrame) Read(io *kaitai.Stream, parent *Spop_Frame, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp4, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp4 = tmp4
	this.RawData = tmp4
	return err
}
type Spop_Ipv4 struct {
	Addr []byte
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_TypedData
}
func NewSpop_Ipv4() *Spop_Ipv4 {
	return &Spop_Ipv4{
	}
}

func (this *Spop_Ipv4) Read(io *kaitai.Stream, parent *Spop_TypedData, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp5, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp5 = tmp5
	this.Addr = tmp5
	return err
}
type Spop_Kv struct {
	KvName *Spop_SpopString
	KvValue *Spop_TypedData
	_io *kaitai.Stream
	_root *Spop
	_parent interface{}
}
func NewSpop_Kv() *Spop_Kv {
	return &Spop_Kv{
	}
}

func (this *Spop_Kv) Read(io *kaitai.Stream, parent interface{}, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp6 := NewSpop_SpopString()
	err = tmp6.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.KvName = tmp6
	tmp7 := NewSpop_TypedData()
	err = tmp7.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.KvValue = tmp7
	return err
}
type Spop_SpopString struct {
	StrLen *Varint
	StrData string
	_io *kaitai.Stream
	_root *Spop
	_parent interface{}
}
func NewSpop_SpopString() *Spop_SpopString {
	return &Spop_SpopString{
	}
}

func (this *Spop_SpopString) Read(io *kaitai.Stream, parent interface{}, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp8 := NewVarint()
	err = tmp8.Read(this._io, this, nil)
	if err != nil {
		return err
	}
	this.StrLen = tmp8
	tmp9, err := this.StrLen.Value()
	if err != nil {
		return err
	}
	tmp10, err := this._io.ReadBytes(int(tmp9))
	if err != nil {
		return err
	}
	tmp10 = tmp10
	this.StrData = string(tmp10)
	return err
}
type Spop_ActionSetVar struct {
	VarScope Spop_VarScope
	VarName *Spop_SpopString
	VarValue *Spop_TypedData
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_Action
}
func NewSpop_ActionSetVar() *Spop_ActionSetVar {
	return &Spop_ActionSetVar{
	}
}

func (this *Spop_ActionSetVar) Read(io *kaitai.Stream, parent *Spop_Action, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp11, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.VarScope = Spop_VarScope(tmp11)
	tmp12 := NewSpop_SpopString()
	err = tmp12.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.VarName = tmp12
	tmp13 := NewSpop_TypedData()
	err = tmp13.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.VarValue = tmp13
	return err
}
type Spop_MetaFlags struct {
	ReservedFlags uint64
	AbortFlag bool
	FinFlag bool
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_FrameMeta
}
func NewSpop_MetaFlags() *Spop_MetaFlags {
	return &Spop_MetaFlags{
	}
}

func (this *Spop_MetaFlags) Read(io *kaitai.Stream, parent *Spop_FrameMeta, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp14, err := this._io.ReadBitsIntBe(30)
	if err != nil {
		return err
	}
	this.ReservedFlags = tmp14
	tmp15, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.AbortFlag = tmp15 != 0
	tmp16, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.FinFlag = tmp16 != 0
	return err
}
type Spop_Frame struct {
	FrameType Spop_FrameType
	FrameMeta *Spop_FrameMeta
	FramePayload interface{}
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop
}
func NewSpop_Frame() *Spop_Frame {
	return &Spop_Frame{
	}
}

func (this *Spop_Frame) Read(io *kaitai.Stream, parent *Spop, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp17, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.FrameType = Spop_FrameType(tmp17)
	tmp18 := NewSpop_FrameMeta()
	err = tmp18.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.FrameMeta = tmp18
	switch (this.FrameType) {
	case Spop_FrameType__Notify:
		tmp19 := NewSpop_ListOfMessages()
		err = tmp19.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.FramePayload = tmp19
	case Spop_FrameType__AgentHello:
		tmp20 := NewSpop_KvList()
		err = tmp20.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.FramePayload = tmp20
	case Spop_FrameType__Unset:
		tmp21 := NewSpop_FragmentedFrame()
		err = tmp21.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.FramePayload = tmp21
	case Spop_FrameType__AgentDisconnect:
		tmp22 := NewSpop_KvList()
		err = tmp22.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.FramePayload = tmp22
	case Spop_FrameType__Ack:
		tmp23 := NewSpop_ListOfActions()
		err = tmp23.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.FramePayload = tmp23
	case Spop_FrameType__HaproxyDisconnect:
		tmp24 := NewSpop_KvList()
		err = tmp24.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.FramePayload = tmp24
	case Spop_FrameType__HaproxyHello:
		tmp25 := NewSpop_KvList()
		err = tmp25.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.FramePayload = tmp25
	}
	return err
}
type Spop_TypedData struct {
	TypeFlags uint64
	Type uint64
	TypeData interface{}
	_io *kaitai.Stream
	_root *Spop
	_parent interface{}
}
func NewSpop_TypedData() *Spop_TypedData {
	return &Spop_TypedData{
	}
}

func (this *Spop_TypedData) Read(io *kaitai.Stream, parent interface{}, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp26, err := this._io.ReadBitsIntBe(4)
	if err != nil {
		return err
	}
	this.TypeFlags = tmp26
	tmp27, err := this._io.ReadBitsIntBe(4)
	if err != nil {
		return err
	}
	this.Type = tmp27
	this._io.AlignToByte()
	switch (this.Type) {
	case 0:
		tmp28 := NewSpop_SpopBool(this.TypeFlags)
		err = tmp28.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.TypeData = tmp28
	case 4:
		tmp29 := NewVarint()
		err = tmp29.Read(this._io, this, nil)
		if err != nil {
			return err
		}
		this.TypeData = tmp29
	case 6:
		tmp30 := NewSpop_Ipv4()
		err = tmp30.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.TypeData = tmp30
	case 7:
		tmp31 := NewSpop_Ipv6()
		err = tmp31.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.TypeData = tmp31
	case 1:
		tmp32 := NewSpop_NullType()
		err = tmp32.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.TypeData = tmp32
	case 3:
		tmp33 := NewVarint()
		err = tmp33.Read(this._io, this, nil)
		if err != nil {
			return err
		}
		this.TypeData = tmp33
	case 5:
		tmp34 := NewVarint()
		err = tmp34.Read(this._io, this, nil)
		if err != nil {
			return err
		}
		this.TypeData = tmp34
	case 8:
		tmp35 := NewSpop_SpopString()
		err = tmp35.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.TypeData = tmp35
	case 9:
		tmp36 := NewSpop_SpopString()
		err = tmp36.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.TypeData = tmp36
	case 2:
		tmp37 := NewVarint()
		err = tmp37.Read(this._io, this, nil)
		if err != nil {
			return err
		}
		this.TypeData = tmp37
	}
	return err
}
type Spop_ListOfMessages struct {
	Messages []*Spop_Message
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_Frame
}
func NewSpop_ListOfMessages() *Spop_ListOfMessages {
	return &Spop_ListOfMessages{
	}
}

func (this *Spop_ListOfMessages) Read(io *kaitai.Stream, parent *Spop_Frame, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 1;; i++ {
		tmp38, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp38 {
			break
		}
		tmp39 := NewSpop_Message()
		err = tmp39.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Messages = append(this.Messages, tmp39)
	}
	return err
}
type Spop_ActionUnsetVar struct {
	VarScope Spop_VarScope
	VarName *Spop_SpopString
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_Action
}
func NewSpop_ActionUnsetVar() *Spop_ActionUnsetVar {
	return &Spop_ActionUnsetVar{
	}
}

func (this *Spop_ActionUnsetVar) Read(io *kaitai.Stream, parent *Spop_Action, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp40, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.VarScope = Spop_VarScope(tmp40)
	tmp41 := NewSpop_SpopString()
	err = tmp41.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.VarName = tmp41
	return err
}
type Spop_FrameMeta struct {
	MetaFlags *Spop_MetaFlags
	StreamId *Varint
	FrameId *Varint
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_Frame
	_raw_MetaFlags []byte
}
func NewSpop_FrameMeta() *Spop_FrameMeta {
	return &Spop_FrameMeta{
	}
}

func (this *Spop_FrameMeta) Read(io *kaitai.Stream, parent *Spop_Frame, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp42, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp42 = tmp42
	this._raw_MetaFlags = tmp42
	_io__raw_MetaFlags := kaitai.NewStream(bytes.NewReader(this._raw_MetaFlags))
	tmp43 := NewSpop_MetaFlags()
	err = tmp43.Read(_io__raw_MetaFlags, this, this._root)
	if err != nil {
		return err
	}
	this.MetaFlags = tmp43
	tmp44 := NewVarint()
	err = tmp44.Read(this._io, this, nil)
	if err != nil {
		return err
	}
	this.StreamId = tmp44
	tmp45 := NewVarint()
	err = tmp45.Read(this._io, this, nil)
	if err != nil {
		return err
	}
	this.FrameId = tmp45
	return err
}
type Spop_Ipv6 struct {
	Addr []byte
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_TypedData
}
func NewSpop_Ipv6() *Spop_Ipv6 {
	return &Spop_Ipv6{
	}
}

func (this *Spop_Ipv6) Read(io *kaitai.Stream, parent *Spop_TypedData, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp46, err := this._io.ReadBytes(int(16))
	if err != nil {
		return err
	}
	tmp46 = tmp46
	this.Addr = tmp46
	return err
}
type Spop_KvList struct {
	Kvs []*Spop_Kv
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_Frame
}
func NewSpop_KvList() *Spop_KvList {
	return &Spop_KvList{
	}
}

func (this *Spop_KvList) Read(io *kaitai.Stream, parent *Spop_Frame, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 1;; i++ {
		tmp47, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp47 {
			break
		}
		tmp48 := NewSpop_Kv()
		err = tmp48.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Kvs = append(this.Kvs, tmp48)
	}
	return err
}
type Spop_Message struct {
	MessageName *Spop_SpopString
	NbArgs uint8
	Kvs []*Spop_Kv
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_ListOfMessages
}
func NewSpop_Message() *Spop_Message {
	return &Spop_Message{
	}
}

func (this *Spop_Message) Read(io *kaitai.Stream, parent *Spop_ListOfMessages, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp49 := NewSpop_SpopString()
	err = tmp49.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.MessageName = tmp49
	tmp50, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NbArgs = tmp50
	for i := 0; i < int(this.NbArgs); i++ {
		_ = i
		tmp51 := NewSpop_Kv()
		err = tmp51.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Kvs = append(this.Kvs, tmp51)
	}
	return err
}

/**
 * bools pull their values from the type_flags
 */
type Spop_SpopBool struct {
	TypeFlags uint64
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_TypedData
	_f_value bool
	value uint64
}
func NewSpop_SpopBool(typeFlags uint64) *Spop_SpopBool {
	return &Spop_SpopBool{
		TypeFlags: typeFlags,
	}
}

func (this *Spop_SpopBool) Read(io *kaitai.Stream, parent *Spop_TypedData, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}
func (this *Spop_SpopBool) Value() (v uint64, err error) {
	if (this._f_value) {
		return this.value, nil
	}
	this.value = uint64(this.TypeFlags)
	this._f_value = true
	return this.value, nil
}
type Spop_NullType struct {
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_TypedData
}
func NewSpop_NullType() *Spop_NullType {
	return &Spop_NullType{
	}
}

func (this *Spop_NullType) Read(io *kaitai.Stream, parent *Spop_TypedData, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}
type Spop_ListOfActions struct {
	Actions []*Spop_Action
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_Frame
}
func NewSpop_ListOfActions() *Spop_ListOfActions {
	return &Spop_ListOfActions{
	}
}

func (this *Spop_ListOfActions) Read(io *kaitai.Stream, parent *Spop_Frame, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 1;; i++ {
		tmp52, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp52 {
			break
		}
		tmp53 := NewSpop_Action()
		err = tmp53.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Actions = append(this.Actions, tmp53)
	}
	return err
}
type Spop_Action struct {
	ActionType Spop_ActionType
	NbArgs uint8
	ActionArgs interface{}
	_io *kaitai.Stream
	_root *Spop
	_parent *Spop_ListOfActions
}
func NewSpop_Action() *Spop_Action {
	return &Spop_Action{
	}
}

func (this *Spop_Action) Read(io *kaitai.Stream, parent *Spop_ListOfActions, root *Spop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp54, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ActionType = Spop_ActionType(tmp54)
	tmp55, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NbArgs = tmp55
	switch (this.ActionType) {
	case Spop_ActionType__SetVar:
		tmp56 := NewSpop_ActionSetVar()
		err = tmp56.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.ActionArgs = tmp56
	case Spop_ActionType__UnsetVar:
		tmp57 := NewSpop_ActionUnsetVar()
		err = tmp57.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.ActionArgs = tmp57
	}
	return err
}
